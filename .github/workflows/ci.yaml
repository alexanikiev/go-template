name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  ACR_NAME: ${{ secrets.ACR_NAME }}
  IMAGE_NAME: solver-app
  TAG: latest

jobs:
  lint-format-test:
    name: Lint, Format, and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Download Dependencies
        run: go mod tidy

      - name: Verify Formatting (go fmt)
        run: go fmt ./...

      - name: Run Go Vet (Static Analysis)
        run: go vet ./...

      - name: Install GolangCI-Lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/HEAD/install.sh | sh -s -- -b $(go env GOPATH)/bin
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Verify GolangCI-Lint Installation
        run: golangci-lint --version

      - name: Run GolangCI-Lint
        run: golangci-lint run ./...

  build-scan-push:
    name: Build, Scan, and Push to ACR
    runs-on: ubuntu-latest
    needs: lint-format-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y docker.io

      - name: Build Docker Image
        run: |
          docker build -t $IMAGE_NAME:$TAG .

      - name: Install Trivy
        run: |
          sudo apt-get update && sudo apt-get install -y wget
          wget https://github.com/aquasecurity/trivy/releases/download/v0.60.0/trivy_0.60.0_Linux-64bit.tar.gz
          tar -xvzf trivy_0.60.0_Linux-64bit.tar.gz
          sudo mv trivy /usr/local/bin/

      - name: Run Trivy Security Scan
        run: |
          trivy image --exit-code 1 --severity CRITICAL,HIGH $IMAGE_NAME:$TAG

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_NAME }}.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Tag and Push Image to ACR
        run: |
          docker tag $IMAGE_NAME:$TAG $ACR_NAME.azurecr.io/$IMAGE_NAME:$TAG
          docker push $ACR_NAME.azurecr.io/$IMAGE_NAME:$TAG
